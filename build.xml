<?xml version="1.0" encoding="UTF-8" ?>
<project name="name-of-project" default="build">
  <property name="toolsdir" value="/usr/local/bin/" />

  <target name="precommit" depends="prepare,lint,phpunit,phpmd,phpcs" description="" />

  <target name="build" depends="prepare,lint,tools-parallel" description="" />

  <target name="tools-parallel" depends="prepare" description="Run tools in parallel">
    <parallel threadCount="2">
      <antcall target="phpunit-ci" />
      <antcall target="phpmd-ci" />
      <antcall target="phpcs-ci" />
    </parallel>
  </target>

  <target name="clean" unless="clean.done" description="Cleanup build artifacts">
    <!-- Put directories/files you want to clean here -->
    <property name="clean.done" value="true" />
  </target>

  <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
    <!--
    <mkdir dir="${basedir}/build/coverage"/>
    -->
    <property name="prepare.done" value="true" />
  </target>

  <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true" taskname="lint">
      <arg value="-l" />
      <fileset dir="${basedir}/src">
        <include name="**/*.php" />
        <modified />
      </fileset>
      <fileset dir="${basedir}/tests">
        <include name="**/*.php" />
        <modified />
      </fileset>
    </apply>
    <property name="lint.done" value="true" />
  </target>

  <target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpmd" taskname="phpmd">
      <arg path="${basedir}/src" />
      <arg value="text" />
      <arg value="cleancode,codesize,controversial,design,naming,unusedcode" />
    </exec>
    <property name="phpmd.done" value="true" />
  </target>

  <target name="phpmd-ci" unless="phpmd.done" description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpmd" taskname="phpmd">
      <arg path="${basedir}/src" />
      <arg value="xml" />
      <arg value="cleancode,codesize,controversial,design,naming,unusedcode" />
      <arg value="--reportfile" />
      <arg path="${basedir}/build/reports/phpmd.xml" />
    </exec>
    <property name="phpmd.done" value="true" />
  </target>

  <target name="phpcs" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpcs" taskname="phpcs">
      <arg value="--standard=PSR2" />
      <arg path="${basedir}/src" />
      <arg path="${basedir}/tests" />
    </exec>
    <property name="phpcs.done" value="true" />
  </target>

  <target name="phpcs-ci" unless="phpcs.done" description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpcs" output="/dev/null" taskname="phpcs">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${basedir}/build/reports/phpcs.xml" />
      <arg value="--standard=PSR2" />
      <arg path="${basedir}/src" />
      <arg path="${basedir}/tests" />
    </exec>
    <property name="phpcs.done" value="true" />
  </target>

  <target name="phpunit" unless="phpunit.done" description="Run unit tests with PHPUnit and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpunit" failonerror="true" taskname="phpunit">
      <arg value="--coverage-text" />
      <arg path="${basedir}/tests/unit-tests" />
    </exec>
    <property name="phpunit.done" value="true" />
  </target>

  <target name="phpunit-ci" unless="phpunit.done" description="Run unit tests with PHPUnit and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpunit" failonerror="true" taskname="phpunit">
      <arg value="--log-junit" />
      <arg path="${basedir}/build/reports/unitreport.xml" />
      <arg value="--coverage-html" />
      <arg path="${basedir}/build/reports/coverage" />
      <arg value="--coverage-clover" />
      <arg path="${basedir}/build/reports/coverage/coverage.xml" />
      <arg value="--coverage-xml" />
      <arg path="${basedir}/build/reports/xml" />
      <arg path="${basedir}/tests/unit-tests" />
    </exec>
    <property name="phpunit.done" value="true" />
  </target>
</project>
